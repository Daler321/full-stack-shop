{"version":3,"file":"static/js/993.29b454cd.chunk.js","mappings":"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","sources":["components/features/form-input/form-input.styles.tsx","components/features/form-input/form-input.component.tsx","routes/log-in-page/log-in-page.styles.tsx","routes/sing-up-page/sing-up-page.component.tsx"],"sourcesContent":["import styled, { css } from 'styled-components';\n\nconst subColor = 'grey';\nconst mainColor = 'black';\n\nconst shrinkLabelStyles = css`\n  top: -17px;\n  font-size: 12px;\n  color: ${mainColor};\n`;\n\ntype FormInputLabelProps = {\n  $shrink?: boolean;\n};\n\nexport const FormInputLabel = styled.label<FormInputLabelProps>`\n  color: ${subColor};\n  font-size: 16px;\n  font-weight: normal;\n  position: absolute;\n  pointer-events: none;\n  left: 20px;\n  top: 10px;\n  transition: 300ms ease all;\n  ${({ $shrink }) => $shrink && shrinkLabelStyles};\n`;\n\nexport const Input = styled.input`\n  background: none;\n  background-color: white;\n  width: 90%;\n  color: ${mainColor};\n  font-size: 18px;\n  padding: 10px 10px 10px 5px;\n  display: block;\n  border-radius: 5px;\n  border: 1px solid ${subColor};\n\n  &:focus {\n    outline: none;\n  }\n\n  &:focus ~ ${FormInputLabel} {\n    ${shrinkLabelStyles};\n  }\n\n  &:disabled {\n    color: ${subColor};\n  }\n`;\n\nexport const Group = styled.div`\n  position: relative;\n  margin: 25px 0;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n\n  input[type='password'] {\n    letter-spacing: 0.3em;\n  }\n`;\n","import { InputHTMLAttributes, FC } from 'react';\n\nimport { FormInputLabel, Input, Group } from './form-input.styles';\n\ntype FormInputProps = { label: string } & InputHTMLAttributes<HTMLInputElement>;\n\nconst FormInput: FC<FormInputProps> = ({ label, ...otherProps }) => {\n  return (\n    <Group>\n      <Input {...otherProps} />\n      {label && (\n        <FormInputLabel\n          $shrink={Boolean(\n            otherProps.value &&\n              typeof otherProps.value === 'string' &&\n              otherProps.value.length\n          )}\n        >\n          {label}\n        </FormInputLabel>\n      )}\n    </Group>\n  );\n};\n\nexport default FormInput;\n","import styled from 'styled-components';\n\nexport const LogInContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  max-width: 480px;\n\n  h2 {\n    margin: 10px 0;\n  }\n`;\n\nexport const LogInPageContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 0 10%;\n  margin-top: 10%;\n`;\n\nexport const ButtonsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 50%;\n`;\n\nexport const LogInForm = styled.form`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 30px 0;\n`;\n","import React, { FormEvent, ChangeEvent, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { AppDispatch } from '../../store/store';\nimport { singUpUser } from '../../store/authorization/authorization.thunk';\nimport {\n  selectAuthErrorAndLoading,\n  selectTokenAndId,\n} from '../../store/authorization/authorization.selector';\n\nimport FormInput from '../../components/features/form-input/form-input.component';\nimport CustomButton from '../../components/elements/custom-button/custom-button.component';\n\nimport {\n  LogInContainer,\n  ButtonsContainer,\n  LogInPageContainer,\n  LogInForm,\n} from '../log-in-page/log-in-page.styles';\n\nconst defaulatFormFields = {\n  userName: '',\n  email: '',\n  password: '',\n  passwordRepit: '',\n};\n\nconst SingUpPage = () => {\n  const [formFields, setFormFields] = useState(defaulatFormFields);\n  const { password, email, userName, passwordRepit } = formFields;\n  const { loading } = useSelector(selectAuthErrorAndLoading);\n  const { token } = useSelector(selectTokenAndId);\n  const dispatch = useDispatch<AppDispatch>();\n  const nav = useNavigate();\n\n  useEffect(() => {\n    if (token) {\n      nav('/profile');\n    }\n  }, [token]);\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (password !== passwordRepit) return alert('Passwords not matchs');\n    const userData = {\n      password,\n      email,\n      username: userName,\n    };\n    dispatch(singUpUser(userData));\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setFormFields({ ...formFields, [name]: value });\n  };\n\n  return (\n    <LogInPageContainer>\n      <LogInContainer>\n        <h2>Create an account</h2>\n        <span>Please fill the fields</span>\n        <LogInForm onSubmit={handleSubmit}>\n          <FormInput\n            label='User name'\n            type='text'\n            required\n            onChange={handleChange}\n            name='userName'\n            value={userName}\n          />\n\n          <FormInput\n            label='Email'\n            type='email'\n            required\n            onChange={handleChange}\n            name='email'\n            value={email}\n          />\n\n          <FormInput\n            label='Password'\n            type='password'\n            required\n            onChange={handleChange}\n            name='password'\n            value={password}\n          />\n\n          <FormInput\n            label='Confirm your password'\n            type='password'\n            required\n            onChange={handleChange}\n            name='passwordRepit'\n            value={passwordRepit}\n          />\n          <ButtonsContainer>\n            <CustomButton type='submit' isLoading={loading}>\n              Sing Up\n            </CustomButton>\n          </ButtonsContainer>\n        </LogInForm>\n        <h2>Do have an account?</h2>\n        <ButtonsContainer>\n          <CustomButton onClick={() => nav('/login')}>Log in</CustomButton>\n        </ButtonsContainer>\n      </LogInContainer>\n    </LogInPageContainer>\n  );\n};\n\nexport default SingUpPage;\n"],"names":["subColor","mainColor","shrinkLabelStyles","css","_templateObject","_taggedTemplateLiteral","FormInputLabel","styled","label","_templateObject2","_ref","$shrink","Input","input","_templateObject3","Group","div","_templateObject4","otherProps","_jsxs","children","_jsx","Boolean","value","length","LogInContainer","LogInPageContainer","ButtonsContainer","LogInForm","form","defaulatFormFields","userName","email","password","passwordRepit","SingUpPage","formFields","setFormFields","useState","loading","useSelector","selectAuthErrorAndLoading","token","selectTokenAndId","dispatch","useDispatch","nav","useNavigate","useEffect","handleChange","event","name","target","onSubmit","async","preventDefault","alert","userData","username","singUpUser","FormInput","type","required","onChange","CustomButton","isLoading","onClick"],"sourceRoot":""}